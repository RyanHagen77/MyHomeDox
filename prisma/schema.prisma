generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * =========================
 * Core enums
 * =========================
 */
enum Role {
  HOMEOWNER
  PRO
  ADMIN
}

enum ProStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ProType {
  REALTOR
  INSPECTOR
  CONTRACTOR
}

enum AccessLevel {
  VIEW
  COMMENT
  EDIT
}

/**
 * =========================
 * Core models
 * =========================
 */

// --- existing enums/datasource/generator here ---

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String?
  name          String?
  image         String?
  emailVerified DateTime?

  role      Role       @default(HOMEOWNER)
  proStatus ProStatus?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  accounts   Account[]
  sessions   Session[]
  homes      Home[]       @relation("HomeOwner")
  access     HomeAccess[]
  records    Record[]     @relation("RecordCreator")
  reminders  Reminder[]   @relation("ReminderCreator")
  proProfile ProProfile?

  // Attachments uploaded
  attachmentsUploaded Attachment[] @relation("AttachmentUploader")

  // Last home (if present)
  lastHomeId String?
  lastHome   Home?   @relation("UserLastHome", fields: [lastHomeId], references: [id])

  // NEW back-relations for Warranty audit
  warrantiesCreated  Warranty[] @relation("WarrantyCreator")
  warrantiesVerified Warranty[] @relation("WarrantyVerifier")

  @@index([email])
  @@index([role])
  @@index([proStatus])
}

model Home {
  id      String   @id @default(cuid())
  address String
  city    String
  state   String
  zip     String
  photos  String[] @default([])
  meta    Json?

  ownerId String?
  owner   User?   @relation("HomeOwner", fields: [ownerId], references: [id])

  // back-relations
  records    Record[]
  reminders  Reminder[]
  warranties Warranty[]
  access     HomeAccess[]

  // NEW: files attached at the home level (and via records)
  attachments Attachment[]

  // NEW: back relation for lastHome
  lastForUsers User[] @relation("UserLastHome")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
  @@index([city, state])
}

model Record {
  id        String   @id @default(cuid())
  homeId    String
  title     String
  note      String?
  date      DateTime
  kind      String?
  createdBy String?

  // OPTIONAL vendor/cost fields you said you added:
  vendor String?
  cost   Float?

  home    Home  @relation(fields: [homeId], references: [id])
  creator User? @relation("RecordCreator", fields: [createdBy], references: [id])

  // NEW: attachments on this record
  attachments Attachment[]

  updatedAt DateTime @updatedAt

  @@index([homeId, date])
  @@index([createdBy])
}

enum AttachmentVisibility {
  OWNER // owner/admin only
  HOME // anyone with access to the home
  PUBLIC // public link (avoid for PII)
}

model Attachment {
  id     String @id @default(cuid())
  homeId String

  // exactly one parent:
  recordId   String?
  reminderId String?
  warrantyId String?

  key        String
  url        String
  filename   String
  mimeType   String
  size       Int
  uploadedBy String
  createdAt  DateTime @default(now())

  // NEW
  visibility AttachmentVisibility @default(OWNER)
  notes      String?

  // relations
  home     Home      @relation(fields: [homeId], references: [id])
  record   Record?   @relation(fields: [recordId], references: [id])
  reminder Reminder? @relation(fields: [reminderId], references: [id])
  warranty Warranty? @relation(fields: [warrantyId], references: [id])
  uploader User      @relation("AttachmentUploader", fields: [uploadedBy], references: [id])

  @@index([homeId])
  @@index([recordId])
  @@index([reminderId])
  @@index([warrantyId])
  @@index([uploadedBy])
}

model Reminder {
  id        String   @id @default(cuid())
  homeId    String
  title     String
  dueAt     DateTime
  note      String? // <- NEW
  createdBy String?

  home    Home  @relation(fields: [homeId], references: [id])
  creator User? @relation("ReminderCreator", fields: [createdBy], references: [id])

  attachments Attachment[]

  @@index([homeId, dueAt])
  @@index([createdBy])
}

model Warranty {
  id        String    @id @default(cuid())
  homeId    String
  item      String
  provider  String?
  policyNo  String?
  expiresAt DateTime?
  note      String? // <- NEW

  // audit
  createdBy  String?
  createdAt  DateTime  @default(now())
  verifiedBy String?
  verifiedAt DateTime?

  home     Home  @relation(fields: [homeId], references: [id])
  creator  User? @relation("WarrantyCreator", fields: [createdBy], references: [id])
  verifier User? @relation("WarrantyVerifier", fields: [verifiedBy], references: [id])

  attachments Attachment[]

  @@index([homeId, expiresAt])
  @@index([createdBy])
  @@index([verifiedBy])
}

/**
 * =========================
 * Pro application/profile
 * =========================
 */

model ProProfile {
  id        String  @id @default(cuid())
  userId    String  @unique
  type      ProType
  company   String?
  licenseNo String?
  website   String?
  phone     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/**
 * =========================
 * Sharing / access control
 * =========================
 */

model HomeAccess {
  id         String    @id @default(cuid())
  homeId     String
  userId     String
  role       String // "owner" | "viewer" | "contributor"
  migratedAt DateTime? // marks LSâ†’DB migration completed for this user/home

  home Home @relation(fields: [homeId], references: [id])
  user User @relation(fields: [userId], references: [id])

  // For requireHomeAccess findUnique({ where: { homeId_userId: ... } })
  @@unique([homeId, userId], name: "homeId_userId")
  @@index([homeId])
  @@index([userId])
}

/**
 * =========================
 * NextAuth models
 * =========================
 */

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
